# -*- coding: utf-8 -*-
"""Dogus_Datathon_Entry4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZIf2L0aYahz2KUxSaZQKW0TJxQt1DuGB
"""

import numpy as np
import pandas as pd

from sklearn.preprocessing import LabelEncoder

import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.neighbors import KNeighborsRegressor
from xgboost import XGBRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR

from sklearn.model_selection import GridSearchCV
from sklearn.preprocessing import StandardScaler

from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import r2_score
from sklearn.metrics import explained_variance_score

import requests
import json
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from matplotlib.pyplot import figure

import datetime

pd.set_option('display.max_columns', None)
pd.set_option('display.float_format', lambda x: '%.3f' % x)
pd.set_option('display.width', 500)

from google.colab import drive 
drive.mount('/content/gdrive')

# Importing main dataset:

df_sample_sub = pd.read_csv('gdrive/My Drive/Dogus/sample_submission_zingat.csv', sep=",")
df_test_set = pd.read_csv('gdrive/My Drive/Dogus/zingat_usecase_testset_null.csv', sep=",")
df_train_set = pd.read_csv('gdrive/My Drive/Dogus/zingat_usecase_trainset.csv', sep=",")

df_dolar = pd.read_csv('gdrive/My Drive/Dogus/dolar.csv', sep=";")
df_faiz = pd.read_csv('gdrive/My Drive/Dogus/faiz_train.csv', sep=";")
df_insaat_maliyet = pd.read_csv('gdrive/My Drive/Dogus/insaat_maliyet_endeksi.csv', sep=";")
df_konut_fiyat = pd.read_csv('gdrive/My Drive/Dogus/konut_fiyat_endeksi.csv', sep=";")
df_ilce_bilgileri_train = pd.read_csv('gdrive/My Drive/Dogus/ilce_bilgileri_train.csv', sep=";")

df_dolar_test = pd.read_csv('gdrive/My Drive/Dogus/dolar_test.csv', sep=";")
df_faiz_test = pd.read_csv('gdrive/My Drive/Dogus/faiz_test.csv', sep=";")
df_insaat_maliyet_test = pd.read_csv('gdrive/My Drive/Dogus/insaat_maliyet_endeksi_test.csv', sep=";")
df_konut_fiyat_test = pd.read_csv('gdrive/My Drive/Dogus/konut_fiyat_endeksi_test.csv', sep=";")
df_ilce_bilgileri_test = pd.read_csv('gdrive/My Drive/Dogus/ilce_bilgileri_test.csv', sep=";")

df_test_set

df_train_set.dtypes

df_train_set = df_train_set.rename(columns={'brütm²': 'brütm2',
                                            'netm²': 'netm2',
                                            'isıtmatipi': 'ısıtmatipi',
                                            'İnterkom': 'ınterkom',
                                            'Çocukoyunalanı': 'cocukoyunalanı'})

df_test_set = df_test_set.rename(columns={'brütm²': 'brütm2',
                                            'netm²': 'netm2',
                                            'isıtmatipi': 'ısıtmatipi',
                                            'İnterkom': 'ınterkom',
                                            'Çocukoyunalanı': 'cocukoyunalanı'})

df_train_set['güncel_fiyat'] = (df_train_set['güncel_fiyat'].str.replace(' TRY','')).astype(int)

df_train_set['tarih'] = pd.to_datetime(df_train_set['tarih'])
df_test_set['tarih'] = pd.to_datetime(df_test_set['tarih'])

df_train_set['yıl'], df_train_set['ay'], df_train_set['gün'] = df_train_set['tarih'].dt.year, df_train_set['tarih'].dt.month, df_train_set['tarih'].dt.day
df_test_set['yıl'], df_test_set['ay'], df_test_set['gün'] = df_test_set['tarih'].dt.year, df_test_set['tarih'].dt.month, df_test_set['tarih'].dt.day

df_train_set[['il','ilçe', 'semt']] = df_train_set['path'].str.split('/',expand=True)
df_test_set[['il','ilçe', 'semt']] = df_test_set['path'].str.split('/',expand=True)

a = df_test_set.sort_values('tarih')
a

df_train_set.describe().T

df_train_set = pd.merge(df_train_set, df_dolar)
df_train_set = pd.merge(df_train_set, df_faiz)
df_train_set = pd.merge(df_train_set, df_insaat_maliyet)
df_train_set = pd.merge(df_train_set, df_konut_fiyat)
df_train_set = pd.merge(df_train_set, df_ilce_bilgileri_train)

df_test_set = pd.merge(df_test_set, df_dolar_test)
df_test_set = pd.merge(df_test_set, df_faiz_test)
df_test_set = pd.merge(df_test_set, df_insaat_maliyet_test)
df_test_set = pd.merge(df_test_set, df_konut_fiyat_test)
df_test_set = pd.merge(df_test_set, df_ilce_bilgileri_test)

df_test_set.tail()

# Eliminating outliers:

lower_bound = 50000
upper_bound = 100000000

df_train_set = df_train_set.drop(df_train_set[df_train_set.güncel_fiyat < lower_bound].index)
df_train_set = df_train_set.drop(df_train_set[df_train_set.güncel_fiyat > upper_bound].index)

df_train_set = df_train_set.reset_index(drop=True)
df_train_set

# In this part the dataset restricted between 0 and upper bound of Quantity value.

df_train_set.groupby('ilçe').güncel_fiyat.agg(['count', 'min', 'mean', 'max']).sort_values(by= 'max', ascending=False)

"""Manzara"""

df_train_set[['manzara_1','manzara_2','manzara_3', 'manzara_4',
              'manzara_5', 'manzara_6', 'manzara_7', 'manzara_8',
              'manzara_9', 'manzara_10', 'manzara_11', 'manzara_12']] = df_train_set['manzara'].str.split(',', expand=True)

df_train_set.drop(labels=['manzara_4', 'manzara_5', 'manzara_6', 'manzara_7', 'manzara_8',
                          'manzara_9', 'manzara_10', 'manzara_11', 'manzara_12', 'tarih', 'path', 'manzara'], axis=1, inplace=True)

df_test_set[['manzara_1','manzara_2','manzara_3', 'manzara_4',
              'manzara_5', 'manzara_6', 'manzara_7', 'manzara_8',
              'manzara_9', 'manzara_10', 'manzara_11', 'manzara_12']] = df_test_set['manzara'].str.split(',', expand=True)

df_test_set.drop(labels=['manzara_4', 'manzara_5', 'manzara_6', 'manzara_7', 'manzara_8',
                          'manzara_9', 'manzara_10', 'manzara_11', 'manzara_12', 'tarih', 'path', 'manzara'], axis=1, inplace=True)

(df_train_set.groupby(["manzara_1"]).agg({"güncel_fiyat": ["count", "min", "mean", "max"]}))

a = df_train_set.groupby('manzara_1')["güncel_fiyat"].count().sort_values(ascending=False)
manzaraDf = a.to_frame().reset_index()

# Bar plot of Quantity-Region for three years period.

plt.figure(figsize=(18, 16), facecolor='white')
splot=sns.barplot(x="manzara_1",y="güncel_fiyat",data=manzaraDf)
for p in splot.patches:
    splot.annotate(format(p.get_height(), '.1f'), 
                   (p.get_x() + p.get_width() / 2., p.get_height()), 
                   ha = 'center', va = 'center', 
                   xytext = (0, 9), 
                   textcoords = 'offset points')
plt.xlabel("Manzara_1", size=14)
plt.ylabel("Adet", size=14)

a = df_train_set.groupby('manzara_1')["güncel_fiyat"].mean().sort_values(ascending=False)
manzaraDf = a.to_frame().reset_index()

# Bar plot of Quantity-Region for three years period.

plt.figure(figsize=(18, 16), facecolor='white')
splot=sns.barplot(x="manzara_1",y="güncel_fiyat",data=manzaraDf)
for p in splot.patches:
    splot.annotate(format(p.get_height(), '.1f'), 
                   (p.get_x() + p.get_width() / 2., p.get_height()), 
                   ha = 'center', va = 'center', 
                   xytext = (0, 9), 
                   textcoords = 'offset points')
plt.xlabel("Manzara_1", size=14)
plt.ylabel("Güncel Fiyat (TL)", size=14)

(df_train_set.groupby(["manzara_2"]).agg({"güncel_fiyat": ["count", "min", "mean", "max"]}))

a = df_train_set.groupby('manzara_2')["güncel_fiyat"].mean().sort_values(ascending=False)
manzaraDf = a.to_frame().reset_index()

# Bar plot of Quantity-Region for three years period.

plt.figure(figsize=(18, 16), facecolor='white')
splot=sns.barplot(x="manzara_2",y="güncel_fiyat",data=manzaraDf)
for p in splot.patches:
    splot.annotate(format(p.get_height(), '.1f'), 
                   (p.get_x() + p.get_width() / 2., p.get_height()), 
                   ha = 'center', va = 'center', 
                   xytext = (0, 9), 
                   textcoords = 'offset points')
plt.xlabel("Manzara_2", size=14)
plt.ylabel("Güncel Fiyat (TL)", size=14)

(df_train_set.groupby(["manzara_3"]).agg({"güncel_fiyat": ["count", "min", "mean", "max"]}))

a = df_train_set.groupby('manzara_3')["güncel_fiyat"].mean().sort_values(ascending=False)
manzaraDf = a.to_frame().reset_index()

# Bar plot of Quantity-Region for three years period.

plt.figure(figsize=(18, 16), facecolor='white')
splot=sns.barplot(x="manzara_3",y="güncel_fiyat",data=manzaraDf)
for p in splot.patches:
    splot.annotate(format(p.get_height(), '.1f'), 
                   (p.get_x() + p.get_width() / 2., p.get_height()), 
                   ha = 'center', va = 'center', 
                   xytext = (0, 9), 
                   textcoords = 'offset points')
plt.xlabel("Manzara_3", size=14)
plt.ylabel("Güncel Fiyat (TL)", size=14)

a = df_train_set['manzara_1'].value_counts().sort_values(ascending=False)
a

a = df_train_set.groupby('manzara_1')["güncel_fiyat"].mean().sort_values(ascending=False)
a

# Manzara için encoding

df_train_set.manzara_1 = df_train_set.manzara_1.replace({"Nehir": "1", "Park": "2", "Cadde": "3", "Vadi": "4", "_": "5", "Şehir": "6", "Dağ": "7",
                                               "Yeşil Alan": "8", "Göl": "9", "Havuz": "10", "Doğa": "11", "Deniz": "12", "Boğaz": "13"})

df_train_set.manzara_2 = df_train_set.manzara_2.replace({"Dağ": "1", "Nehir": "2", "Cadde": "3", "Park": "4", "Vadi": "5", "Havuz": "6", "Yeşil Alan": "7",
                                               "Göl": "8", "Şehir": "9", "Doğa": "10", "Deniz": "11", "Boğaz": "12"})

df_train_set.manzara_3 = df_train_set.manzara_3.replace({"Dağ": "1", "Nehir": "2", "Göl": "3", "Cadde": "4", "Park": "5", "Havuz": "6", "Yeşil Alan": "7",
                                               "Vadi": "8", "Şehir": "9", "Boğaz": "10", "Deniz": "11", "Doğa": "12"})

df_test_set.manzara_1 = df_test_set.manzara_1.replace({"Nehir": "1", "Park": "2", "Cadde": "3", "Vadi": "4", "_": "5", "Şehir": "6", "Dağ": "7",
                                               "Yeşil Alan": "8", "Göl": "9", "Havuz": "10", "Doğa": "11", "Deniz": "12", "Boğaz": "13"})

df_test_set.manzara_2 = df_test_set.manzara_2.replace({"Dağ": "1", "Nehir": "2", "Cadde": "3", "Park": "4", "Vadi": "5", "Havuz": "6", "Yeşil Alan": "7",
                                               "Göl": "8", "Şehir": "9", "Doğa": "10", "Deniz": "11", "Boğaz": "12"})

df_test_set.manzara_3 = df_test_set.manzara_3.replace({"Dağ": "1", "Nehir": "2", "Göl": "3", "Cadde": "4", "Park": "5", "Havuz": "6", "Yeşil Alan": "7",
                                               "Vadi": "8", "Şehir": "9", "Boğaz": "10", "Deniz": "11", "Doğa": "12"})

df_train_set['manzara_1'] = df_train_set['manzara_1'].fillna(0)
df_train_set['manzara_2'] = df_train_set['manzara_2'].fillna(0)
df_train_set['manzara_3'] = df_train_set['manzara_3'].fillna(0)

df_test_set['manzara_1'] = df_test_set['manzara_1'].fillna(0)
df_test_set['manzara_2'] = df_test_set['manzara_2'].fillna(0)
df_test_set['manzara_3'] = df_test_set['manzara_3'].fillna(0)

"""**Emlak Tipi**"""

df_train_set[['emlaktipi_1','emlaktipi_2','emlaktipi_3']] = df_train_set['emlaktipi'].str.split('/', expand=True)
df_train_set.drop(labels=['emlaktipi', 'emlaktipi_2','emlaktipi_3'], axis=1, inplace=True)

df_test_set[['emlaktipi_1','emlaktipi_2','emlaktipi_3']] = df_test_set['emlaktipi'].str.split('/', expand=True)
df_test_set.drop(labels=['emlaktipi', 'emlaktipi_2','emlaktipi_3'], axis=1, inplace=True)

a = df_train_set.groupby('emlaktipi_1')["güncel_fiyat"].count().sort_values(ascending=False)
manzaraDf = a.to_frame().reset_index()

# Bar plot of Quantity-Region for three years period.

plt.figure(figsize=(18, 16), facecolor='white')
splot=sns.barplot(x="emlaktipi_1",y="güncel_fiyat",data=manzaraDf)
for p in splot.patches:
    splot.annotate(format(p.get_height(), '.1f'), 
                   (p.get_x() + p.get_width() / 2., p.get_height()), 
                   ha = 'center', va = 'center', 
                   xytext = (0, 9), 
                   textcoords = 'offset points')
plt.xlabel("Emlak Tipi", size=14)
plt.ylabel("Adet", size=14)

a = df_train_set.groupby('emlaktipi_1')["güncel_fiyat"].mean().sort_values(ascending=False)
manzaraDf = a.to_frame().reset_index()

# Bar plot of Quantity-Region for three years period.

plt.figure(figsize=(18, 16), facecolor='white')
splot=sns.barplot(x="emlaktipi_1",y="güncel_fiyat",data=manzaraDf)
for p in splot.patches:
    splot.annotate(format(p.get_height(), '.1f'), 
                   (p.get_x() + p.get_width() / 2., p.get_height()), 
                   ha = 'center', va = 'center', 
                   xytext = (0, 9), 
                   textcoords = 'offset points')
plt.xlabel("Emlak Tipi", size=14)
plt.ylabel("Güncel Fiyat (TL)", size=14)

# Emlak Tipi için encoding (Train)

content = ["Prefabrik Ev", "Yazlık", "Daire", "Müstakil Ev", "Çiftlik Evi",
           "Villa", "Rezidans", "Yalı Dairesi", "Köşk"]
condlist = [df_train_set.emlaktipi_1.str.contains(letter) for letter in content]
choicelist = ["1", "2", "3", "4", "5", "6", "7", "8", "9"]
df_train_set["emlaktipi_1"] = np.select(condlist, choicelist)

# Emlak Tipi için encoding (Test)

content = ["Prefabrik Ev", "Yazlık", "Daire", "Müstakil Ev", "Çiftlik Evi",
           "Villa", "Rezidans", "Yalı Dairesi", "Köşk"]
condlist = [df_test_set.emlaktipi_1.str.contains(letter) for letter in content]
choicelist = ["1", "2", "3", "4", "5", "6", "7", "8", "9"]
df_test_set["emlaktipi_1"] = np.select(condlist, choicelist)

print(df_train_set['emlaktipi_1'].value_counts())

"""**Bina Yaşı**"""

print(df_train_set['binayaşı'].value_counts())

a = df_train_set.groupby('binayaşı')["güncel_fiyat"].count().sort_values(ascending=False)
manzaraDf = a.to_frame().reset_index()

# Bar plot of Quantity-Region for three years period.

plt.figure(figsize=(18, 16), facecolor='white')
splot=sns.barplot(x="binayaşı",y="güncel_fiyat",data=manzaraDf)
for p in splot.patches:
    splot.annotate(format(p.get_height(), '.1f'), 
                   (p.get_x() + p.get_width() / 2., p.get_height()), 
                   ha = 'center', va = 'center', 
                   xytext = (0, 9), 
                   textcoords = 'offset points')
plt.xlabel("Bina Yaşı", size=14)
plt.ylabel("Adet", size=14)

a = df_train_set.groupby('binayaşı')["güncel_fiyat"].mean().sort_values(ascending=False)
manzaraDf = a.to_frame().reset_index()

# Bar plot of Quantity-Region for three years period.

plt.figure(figsize=(18, 16), facecolor='white')
splot=sns.barplot(x="binayaşı",y="güncel_fiyat",data=manzaraDf)
for p in splot.patches:
    splot.annotate(format(p.get_height(), '.1f'), 
                   (p.get_x() + p.get_width() / 2., p.get_height()), 
                   ha = 'center', va = 'center', 
                   xytext = (0, 9), 
                   textcoords = 'offset points')
plt.xlabel("Bina Yaşı", size=14)
plt.ylabel("Güncel Fiyat (TL)", size=14)

#a = df_train_set.groupby(['ilçe'])["güncel_fiyat"].mean().sort_values(ascending=False)
#bina_yasi = a.to_frame().reset_index()
#bina_yasi

b = df_train_set.groupby(['binayaşı', 'ilçe']).güncel_fiyat.agg(['count', 'min', 'mean', 'max'])
b.to_excel('bina_yası_ilce.xlsx')

c = (df_train_set.groupby(["binayaşı"]).agg({"güncel_fiyat": ["count", "min", "mean", "max"]}))
c.to_excel('c.xlsx')

# Bina Yaşı için encoding:

df_train_set.binayaşı = df_train_set.binayaşı.replace({"0": "1", "1": "2", "2": "3", "-": "4", "16-20 arası": "5", "21-25 arası": "6",
                                                       "6-10 arası": "7", "26-30 arası": "8", "3": "9", "31-35 arası": "10",
                                                       "11-15 arası": "11", "4": "12", "36-40 arası": "13", "5": "14", "40 ve üzeri": "15"})

df_test_set.binayaşı = df_test_set.binayaşı.replace({"0": "1", "1": "2", "2": "3", "-": "4", "16-20 arası": "5", "21-25 arası": "6",
                                                       "6-10 arası": "7", "26-30 arası": "8", "3": "9", "31-35 arası": "10",
                                                       "11-15 arası": "11", "4": "12", "36-40 arası": "13", "5": "14", "40 ve üzeri": "15"})

"""**Banyo Sayısı**"""

print(df_train_set['banyosayisi'].value_counts())

a = df_train_set.groupby('banyosayisi')["güncel_fiyat"].mean().sort_values(ascending=False)
manzaraDf = a.to_frame().reset_index()

# Bar plot of Quantity-Region for three years period.

plt.figure(figsize=(18, 16), facecolor='white')
splot=sns.barplot(x="banyosayisi",y="güncel_fiyat",data=manzaraDf)
for p in splot.patches:
    splot.annotate(format(p.get_height(), '.1f'), 
                   (p.get_x() + p.get_width() / 2., p.get_height()), 
                   ha = 'center', va = 'center', 
                   xytext = (0, 9), 
                   textcoords = 'offset points')
plt.xlabel("Banyo Sayısı", size=14)
plt.ylabel("Güncel Fiyat (TL)", size=14)

c = df_train_set.groupby(['ilçe', 'banyosayisi']).güncel_fiyat.agg(['min', 'mean', 'max'])
c.to_excel('banyo_yası_ilce.xlsx')

df_train_set.banyosayisi = df_train_set.banyosayisi.replace({"1": "1", "2": "2", "3": "3", "4": "4", "5": "5", "6 ve üzeri": "6", "-": "1"})
df_test_set.banyosayisi = df_test_set.banyosayisi.replace({"1": "1", "2": "2", "3": "3", "4": "4", "5": "5", "6 ve üzeri": "6", "-": "1"})

"""**Oda Sayısı**"""

print(df_train_set['odasayısı'].value_counts())

df_train_set.loc[df_train_set['odasayısı'] == "-", 'odasayısı'] = "3+1"
df_test_set.loc[df_test_set['odasayısı'] == "-", 'odasayısı'] = "3+1"

df_train_set.loc[df_train_set['odasayısı'] == '1149+0']

df_train_set = df_train_set.drop(df_train_set[df_train_set.odasayısı == '1149+0'].index)
df_test_set = df_test_set.drop(df_test_set[df_test_set.odasayısı == '1149+0'].index)

df_train_set.reset_index(drop=True, inplace=True)
df_test_set.reset_index(drop=True, inplace=True)

# Oda Sayısı (Train):

df_train_set[['oda','salon']] = df_train_set['odasayısı'].str.split('+', expand=True)

df_train_set['oda'] = df_train_set['oda'].astype(int)
df_train_set['salon'] = df_train_set['salon'].astype(int)

df_train_set.drop(labels=['odasayısı'], axis=1, inplace=True)

df_train_set['toplam_odasayısı'] = df_train_set['oda'] + df_train_set['salon']

# Oda Sayısı (Test):

df_test_set[['oda','salon']] = df_test_set['odasayısı'].str.split('+', expand=True)

df_test_set['oda'] = df_test_set['oda'].astype(int)
df_test_set['salon'] = df_test_set['salon'].astype(int)

df_test_set.drop(labels=['odasayısı'], axis=1, inplace=True)

df_test_set['toplam_odasayısı'] = df_test_set['oda'] + df_test_set['salon']

"""**Otopark**"""

print(df_train_set['otopark'].value_counts())

a = df_train_set.groupby('otopark')["güncel_fiyat"].mean().sort_values(ascending=False)
manzaraDf = a.to_frame().reset_index()

# Bar plot of Quantity-Region for three years period.

plt.figure(figsize=(18, 16), facecolor='white')
splot=sns.barplot(x="otopark",y="güncel_fiyat",data=manzaraDf)
for p in splot.patches:
    splot.annotate(format(p.get_height(), '.1f'), 
                   (p.get_x() + p.get_width() / 2., p.get_height()), 
                   ha = 'center', va = 'center', 
                   xytext = (0, 9), 
                   textcoords = 'offset points')
plt.xlabel("Otopark", size=14)
plt.ylabel("Güncel Fiyat (TL)", size=14)

# Otopark Encoding:

# Otopark var mı?

df_train_set["otoparkvarmı"] = df_train_set.otopark.replace({"Var": "1", "Var (Ücretsiz, Kapalı)": "1", "Var (Ücretsiz, Açık)": "1", "Var (Açık,Kapalı)": "1",
                                                          "Yok": "0", "Var (Ücretli, Açık)": "1", "Var (Ücretli, Kapalı)": "1", "-": "0"})


df_train_set["kapalıotopark"] = df_train_set.otopark.replace({"Var": "0", "Var (Ücretsiz, Kapalı)": "1", "Var (Ücretsiz, Açık)": "0", "Var (Açık,Kapalı)": "1",
                                                           "Yok": "0", "Var (Ücretli, Açık)": "0", "Var (Ücretli, Kapalı)": "1", "-": "0"})

df_train_set["ücretsizotopark"] = df_train_set.otopark.replace({"Var": "1", "Var (Ücretsiz, Kapalı)": "1", "Var (Ücretsiz, Açık)": "1", "Var (Açık,Kapalı)": "1",
                                                             "Yok": "0", "Var (Ücretli, Açık)": "0", "Var (Ücretli, Kapalı)": "0", "-": "0"})

df_train_set["ücretliotopark"] = df_train_set.otopark.replace({"Var": "0", "Var (Ücretsiz, Kapalı)": "0", "Var (Ücretsiz, Açık)": "0", "Var (Açık,Kapalı)": "0",
                                                           "Yok": "0", "Var (Ücretli, Açık)": "1", "Var (Ücretli, Kapalı)": "1", "-": "0"})


df_test_set["otoparkvarmı"] = df_test_set.otopark.replace({"Var": "1", "Var (Ücretsiz, Kapalı)": "1", "Var (Ücretsiz, Açık)": "1", "Var (Açık,Kapalı)": "1",
                                                        "Yok": "0", "Var (Ücretli, Açık)": "1", "Var (Ücretli, Kapalı)": "1", "-": "0"})


df_test_set["kapalıotopark"] = df_test_set.otopark.replace({"Var": "0", "Var (Ücretsiz, Kapalı)": "1", "Var (Ücretsiz, Açık)": "0", "Var (Açık,Kapalı)": "1",
                                                         "Yok": "0", "Var (Ücretli, Açık)": "0", "Var (Ücretli, Kapalı)": "1", "-": "0"})

df_test_set["ücretsizotopark"] = df_test_set.otopark.replace({"Var": "1", "Var (Ücretsiz, Kapalı)": "1", "Var (Ücretsiz, Açık)": "1", "Var (Açık,Kapalı)": "1",
                                                           "Yok": "0", "Var (Ücretli, Açık)": "0", "Var (Ücretli, Kapalı)": "0", "-": "0"})

df_test_set["ücretliotopark"] = df_test_set.otopark.replace({"Var": "0", "Var (Ücretsiz, Kapalı)": "0", "Var (Ücretsiz, Açık)": "0", "Var (Açık,Kapalı)": "0",
                                                         "Yok": "0", "Var (Ücretli, Açık)": "1", "Var (Ücretli, Kapalı)": "1", "-": "0"})


df_train_set.drop(labels=['otopark'], axis=1, inplace=True)
df_test_set.drop(labels=['otopark'], axis=1, inplace=True)

"""**Isıtma Tipi**"""

print(df_train_set['ısıtmatipi'].value_counts())

a = df_train_set.groupby('ısıtmatipi')["güncel_fiyat"].mean().sort_values(ascending=False)
manzaraDf = a.to_frame().reset_index()

# Bar plot of Quantity-Region for three years period.

plt.figure(figsize=(28, 26), facecolor='white')
splot=sns.barplot(x="ısıtmatipi",y="güncel_fiyat",data=manzaraDf)
for p in splot.patches:
    splot.annotate(format(p.get_height(), '.1f'), 
                   (p.get_x() + p.get_width() / 2., p.get_height()), 
                   ha = 'center', va = 'center', 
                   xytext = (0, 9), 
                   textcoords = 'offset points')
plt.xlabel("Isıtma Tipi", size=10)
plt.ylabel("Güncel Fiyat (TL)", size=10)

# Isıtma Tipi (Train):

# Doğalgaz var mı?

df_train_set["dogalgazlı"] = df_train_set.ısıtmatipi.replace({"Kombi (Doğalgaz)": "1", "Klima": "0", "Merkezi Sistem (Isı Payı Ölçer)": "0", "Merkezi Sistem": "0",
                                                              "Yok": "0", "Kalorifer (Doğalgaz)": "1", "Yerden Isıtma": "0", "-": "0", "Soba (Kömür)": "0",
                                                              "Kat Kaloriferi": "0", "Jeotermal": "0", "Kombi (Elektrikli)": "0", "Fancoil": "0", "Soba (Doğalgaz)": "1",
                                                              "Kalorifer (Kömür)": "0", "Güneş Enerjisi": "0", "Kalorifer (Akaryakıt)": "0"})

df_train_set["sobalı"] = df_train_set.ısıtmatipi.replace({"Kombi (Doğalgaz)": "0", "Klima": "0", "Merkezi Sistem (Isı Payı Ölçer)": "0", "Merkezi Sistem": "0",
                                                              "Yok": "0", "Kalorifer (Doğalgaz)": "0", "Yerden Isıtma": "0", "-": "0", "Soba (Kömür)": "1",
                                                              "Kat Kaloriferi": "0", "Jeotermal": "0", "Kombi (Elektrikli)": "0", "Fancoil": "0", "Soba (Doğalgaz)": "1",
                                                              "Kalorifer (Kömür)": "0", "Güneş Enerjisi": "0", "Kalorifer (Akaryakıt)": "0"})

df_train_set["merkeziısıtma"] = df_train_set.ısıtmatipi.replace({"Kombi (Doğalgaz)": "0", "Klima": "0", "Merkezi Sistem (Isı Payı Ölçer)": "1", "Merkezi Sistem": "1",
                                                              "Yok": "0", "Kalorifer (Doğalgaz)": "0", "Yerden Isıtma": "0", "-": "0", "Soba (Kömür)": "0",
                                                              "Kat Kaloriferi": "0", "Jeotermal": "0", "Kombi (Elektrikli)": "0", "Fancoil": "0", "Soba (Doğalgaz)": "0",
                                                              "Kalorifer (Kömür)": "0", "Güneş Enerjisi": "0", "Kalorifer (Akaryakıt)": "0"})

df_train_set["kömürlü"] = df_train_set.ısıtmatipi.replace({"Kombi (Doğalgaz)": "0", "Klima": "0", "Merkezi Sistem (Isı Payı Ölçer)": "0", "Merkezi Sistem": "0",
                                                              "Yok": "0", "Kalorifer (Doğalgaz)": "0", "Yerden Isıtma": "0", "-": "0", "Soba (Kömür)": "1",
                                                              "Kat Kaloriferi": "0", "Jeotermal": "0", "Kombi (Elektrikli)": "0", "Fancoil": "0", "Soba (Doğalgaz)": "0",
                                                              "Kalorifer (Kömür)": "1", "Güneş Enerjisi": "0", "Kalorifer (Akaryakıt)": "0"})

df_train_set["kaloriferli"] = df_train_set.ısıtmatipi.replace({"Kombi (Doğalgaz)": "0", "Klima": "0", "Merkezi Sistem (Isı Payı Ölçer)": "0", "Merkezi Sistem": "0",
                                                              "Yok": "0", "Kalorifer (Doğalgaz)": "1", "Yerden Isıtma": "0", "-": "0", "Soba (Kömür)": "0",
                                                              "Kat Kaloriferi": "1", "Jeotermal": "0", "Kombi (Elektrikli)": "0", "Fancoil": "0", "Soba (Doğalgaz)": "0",
                                                              "Kalorifer (Kömür)": "1", "Güneş Enerjisi": "0", "Kalorifer (Akaryakıt)": "1"})

df_train_set["kombili"] = df_train_set.ısıtmatipi.replace({"Kombi (Doğalgaz)": "1", "Klima": "0", "Merkezi Sistem (Isı Payı Ölçer)": "0", "Merkezi Sistem": "0",
                                                              "Yok": "0", "Kalorifer (Doğalgaz)": "0", "Yerden Isıtma": "0", "-": "0", "Soba (Kömür)": "0",
                                                              "Kat Kaloriferi": "0", "Jeotermal": "0", "Kombi (Elektrikli)": "1", "Fancoil": "0", "Soba (Doğalgaz)": "0",
                                                              "Kalorifer (Kömür)": "0", "Güneş Enerjisi": "0", "Kalorifer (Akaryakıt)": "1"})

df_train_set["ısıtma_klima"] = df_train_set.ısıtmatipi.replace({"Kombi (Doğalgaz)": "0", "Klima": "1", "Merkezi Sistem (Isı Payı Ölçer)": "0", "Merkezi Sistem": "0",
                                                              "Yok": "0", "Kalorifer (Doğalgaz)": "0", "Yerden Isıtma": "0", "-": "0", "Soba (Kömür)": "0",
                                                              "Kat Kaloriferi": "0", "Jeotermal": "0", "Kombi (Elektrikli)": "0", "Fancoil": "0", "Soba (Doğalgaz)": "0",
                                                              "Kalorifer (Kömür)": "0", "Güneş Enerjisi": "0", "Kalorifer (Akaryakıt)": "0"})

df_train_set["ısıtma_diger"] = df_train_set.ısıtmatipi.replace({"Kombi (Doğalgaz)": "0", "Klima": "0", "Merkezi Sistem (Isı Payı Ölçer)": "0", "Merkezi Sistem": "0",
                                                              "Yok": "0", "Kalorifer (Doğalgaz)": "0", "Yerden Isıtma": "0", "-": "0", "Soba (Kömür)": "0",
                                                              "Kat Kaloriferi": "0", "Jeotermal": "1", "Kombi (Elektrikli)": "0", "Fancoil": "1", "Soba (Doğalgaz)": "0",
                                                              "Kalorifer (Kömür)": "0", "Güneş Enerjisi": "1", "Kalorifer (Akaryakıt)": "0"})

df_train_set.drop(labels=['ısıtmatipi'], axis=1, inplace=True)

# Isıtma Tipi (Test):

# Doğalgaz var mı?

df_test_set["dogalgazlı"] = df_test_set.ısıtmatipi.replace({"Kombi (Doğalgaz)": "1", "Klima": "0", "Merkezi Sistem (Isı Payı Ölçer)": "0", "Merkezi Sistem": "0",
                                                              "Yok": "0", "Kalorifer (Doğalgaz)": "1", "Yerden Isıtma": "0", "-": "0", "Soba (Kömür)": "0",
                                                              "Kat Kaloriferi": "0", "Jeotermal": "0", "Kombi (Elektrikli)": "0", "Fancoil": "0", "Soba (Doğalgaz)": "1",
                                                              "Kalorifer (Kömür)": "0", "Güneş Enerjisi": "0", "Kalorifer (Akaryakıt)": "0"})

df_test_set["sobalı"] = df_test_set.ısıtmatipi.replace({"Kombi (Doğalgaz)": "0", "Klima": "0", "Merkezi Sistem (Isı Payı Ölçer)": "0", "Merkezi Sistem": "0",
                                                              "Yok": "0", "Kalorifer (Doğalgaz)": "0", "Yerden Isıtma": "0", "-": "0", "Soba (Kömür)": "1",
                                                              "Kat Kaloriferi": "0", "Jeotermal": "0", "Kombi (Elektrikli)": "0", "Fancoil": "0", "Soba (Doğalgaz)": "1",
                                                              "Kalorifer (Kömür)": "0", "Güneş Enerjisi": "0", "Kalorifer (Akaryakıt)": "0"})

df_test_set["merkeziısıtma"] = df_test_set.ısıtmatipi.replace({"Kombi (Doğalgaz)": "0", "Klima": "0", "Merkezi Sistem (Isı Payı Ölçer)": "1", "Merkezi Sistem": "1",
                                                              "Yok": "0", "Kalorifer (Doğalgaz)": "0", "Yerden Isıtma": "0", "-": "0", "Soba (Kömür)": "0",
                                                              "Kat Kaloriferi": "0", "Jeotermal": "0", "Kombi (Elektrikli)": "0", "Fancoil": "0", "Soba (Doğalgaz)": "0",
                                                              "Kalorifer (Kömür)": "0", "Güneş Enerjisi": "0", "Kalorifer (Akaryakıt)": "0"})

df_test_set["kömürlü"] = df_test_set.ısıtmatipi.replace({"Kombi (Doğalgaz)": "0", "Klima": "0", "Merkezi Sistem (Isı Payı Ölçer)": "0", "Merkezi Sistem": "0",
                                                              "Yok": "0", "Kalorifer (Doğalgaz)": "0", "Yerden Isıtma": "0", "-": "0", "Soba (Kömür)": "1",
                                                              "Kat Kaloriferi": "0", "Jeotermal": "0", "Kombi (Elektrikli)": "0", "Fancoil": "0", "Soba (Doğalgaz)": "0",
                                                              "Kalorifer (Kömür)": "1", "Güneş Enerjisi": "0", "Kalorifer (Akaryakıt)": "0"})

df_test_set["kaloriferli"] = df_test_set.ısıtmatipi.replace({"Kombi (Doğalgaz)": "0", "Klima": "0", "Merkezi Sistem (Isı Payı Ölçer)": "0", "Merkezi Sistem": "0",
                                                              "Yok": "0", "Kalorifer (Doğalgaz)": "1", "Yerden Isıtma": "0", "-": "0", "Soba (Kömür)": "0",
                                                              "Kat Kaloriferi": "1", "Jeotermal": "0", "Kombi (Elektrikli)": "0", "Fancoil": "0", "Soba (Doğalgaz)": "0",
                                                              "Kalorifer (Kömür)": "1", "Güneş Enerjisi": "0", "Kalorifer (Akaryakıt)": "1"})

df_test_set["kombili"] = df_test_set.ısıtmatipi.replace({"Kombi (Doğalgaz)": "1", "Klima": "0", "Merkezi Sistem (Isı Payı Ölçer)": "0", "Merkezi Sistem": "0",
                                                              "Yok": "0", "Kalorifer (Doğalgaz)": "0", "Yerden Isıtma": "0", "-": "0", "Soba (Kömür)": "0",
                                                              "Kat Kaloriferi": "0", "Jeotermal": "0", "Kombi (Elektrikli)": "1", "Fancoil": "0", "Soba (Doğalgaz)": "0",
                                                              "Kalorifer (Kömür)": "0", "Güneş Enerjisi": "0", "Kalorifer (Akaryakıt)": "1"})

df_test_set["ısıtma_klima"] = df_test_set.ısıtmatipi.replace({"Kombi (Doğalgaz)": "0", "Klima": "1", "Merkezi Sistem (Isı Payı Ölçer)": "0", "Merkezi Sistem": "0",
                                                              "Yok": "0", "Kalorifer (Doğalgaz)": "0", "Yerden Isıtma": "0", "-": "0", "Soba (Kömür)": "0",
                                                              "Kat Kaloriferi": "0", "Jeotermal": "0", "Kombi (Elektrikli)": "0", "Fancoil": "0", "Soba (Doğalgaz)": "0",
                                                              "Kalorifer (Kömür)": "0", "Güneş Enerjisi": "0", "Kalorifer (Akaryakıt)": "0"})

df_test_set["ısıtma_diger"] = df_test_set.ısıtmatipi.replace({"Kombi (Doğalgaz)": "0", "Klima": "0", "Merkezi Sistem (Isı Payı Ölçer)": "0", "Merkezi Sistem": "0",
                                                              "Yok": "0", "Kalorifer (Doğalgaz)": "0", "Yerden Isıtma": "0", "-": "0", "Soba (Kömür)": "0",
                                                              "Kat Kaloriferi": "0", "Jeotermal": "1", "Kombi (Elektrikli)": "0", "Fancoil": "1", "Soba (Doğalgaz)": "0",
                                                              "Kalorifer (Kömür)": "0", "Güneş Enerjisi": "1", "Kalorifer (Akaryakıt)": "0"})

df_test_set.drop(labels=['ısıtmatipi'], axis=1, inplace=True)

"""**Binadaki Kat Sayısı**"""

a = df_train_set.groupby('binadakikatsayısı')["güncel_fiyat"].mean().sort_values(ascending=False)
manzaraDf = a.to_frame().reset_index()

# Bar plot of Quantity-Region for three years period.

plt.figure(figsize=(28, 26), facecolor='white')
splot=sns.barplot(x="binadakikatsayısı",y="güncel_fiyat",data=manzaraDf)
for p in splot.patches:
    splot.annotate(format(p.get_height(), '.1f'), 
                   (p.get_x() + p.get_width() / 2., p.get_height()), 
                   ha = 'center', va = 'center', 
                   xytext = (0, 9), 
                   textcoords = 'offset points')
plt.xlabel("Binadaki Kat Sayısı", size=10)
plt.ylabel("Güncel Fiyat (TL)", size=10)

df_train_set["binadakikatsayısı"] = df_train_set.binadakikatsayısı.replace({"10-20 arası": "15", "-": "5", "20 ve üzeri": "25"})

df_test_set["binadakikatsayısı"] = df_test_set.binadakikatsayısı.replace({"10-20 arası": "15", "-": "5", "20 ve üzeri": "25"})

"""**Bulunduğu Kat**"""

print(df_train_set['bulunduğukat'].value_counts())

a = df_train_set.groupby('bulunduğukat')["güncel_fiyat"].mean().sort_values(ascending=False)
manzaraDf = a.to_frame().reset_index()

# Bar plot of Quantity-Region for three years period.

plt.figure(figsize=(28, 26), facecolor='white')
splot=sns.barplot(x="bulunduğukat",y="güncel_fiyat",data=manzaraDf)
for p in splot.patches:
    splot.annotate(format(p.get_height(), '.1f'), 
                   (p.get_x() + p.get_width() / 2., p.get_height()), 
                   ha = 'center', va = 'center', 
                   xytext = (0, 9), 
                   textcoords = 'offset points')
plt.xlabel("Bulunduğu Kat", size=10)
plt.ylabel("Güncel Fiyat (TL)", size=10)

df_train_set["bulunduğukat"] = df_train_set.bulunduğukat.replace({"Müstakil": "1", "Bahçe katı": "-1", "Yüksek Giriş": "1.5", "Giriş Katı": "0", "Komple": "5",
                                                                  "Kot 1": "-1", "Zemin Kat": "0", "Kot 2": "-2", "Çatı Katı": "5.5", "Kot 3": "-3", "20 ve üzeri": "25",
                                                                  "Kot 4": "-4", "En Üst Kat": "5", "Teras Kat": "5.5", "Bodrum Kat": "-1", "-": "5"})

df_test_set["bulunduğukat"] = df_test_set.bulunduğukat.replace({"Müstakil": "1", "Bahçe katı": "-1", "Yüksek Giriş": "1.5", "Giriş Katı": "0", "Komple": "5",
                                                                  "Kot 1": "-1", "Zemin Kat": "0", "Kot 2": "-2", "Çatı Katı": "5.5", "Kot 3": "-3", "20 ve üzeri": "25",
                                                                  "Kot 4": "-4", "En Üst Kat": "5", "Teras Kat": "5.5", "Bodrum Kat": "-1", "-": "5"})

"""**Sosyo Ekonomik Durum**"""

df_train_set["Sosyo_Eko"].value_counts()

a = df_train_set.groupby('Sosyo_Eko')["güncel_fiyat"].mean().sort_values(ascending=False)
manzaraDf = a.to_frame().reset_index()

# Bar plot of Quantity-Region for three years period.

plt.figure(figsize=(28, 26), facecolor='white')
splot=sns.barplot(x="Sosyo_Eko",y="güncel_fiyat",data=manzaraDf)
for p in splot.patches:
    splot.annotate(format(p.get_height(), '.1f'), 
                   (p.get_x() + p.get_width() / 2., p.get_height()), 
                   ha = 'center', va = 'center', 
                   xytext = (0, 9), 
                   textcoords = 'offset points')
plt.xlabel("Bulunduğu Kat", size=10)
plt.ylabel("Güncel Fiyat (TL)", size=10)

df_train_set.Sosyo_Eko = df_train_set.Sosyo_Eko.replace({"A+": "8", "A-": "7", "A": "6", "B+": "5",
                                                         "B-": "4", "B": "3", "C+": "2", "C": "1"})

df_test_set.Sosyo_Eko = df_test_set.Sosyo_Eko.replace({"A+": "8", "A-": "7", "A": "6", "B+": "5",
                                                       "B-": "4", "B": "3", "C+": "2", "C": "1"})

df_train_set.head()

"""**İlçe**"""

df_test_set["ilçe"].value_counts()

a = df_train_set.groupby('ilçe')["güncel_fiyat"].mean().sort_values(ascending=False)
manzaraDf = a.to_frame().reset_index()

# Bar plot of Quantity-Region for three years period.

plt.figure(figsize=(28, 26), facecolor='white')
splot=sns.barplot(x="ilçe",y="güncel_fiyat",data=manzaraDf)
for p in splot.patches:
    splot.annotate(format(p.get_height(), '.1f'), 
                   (p.get_x() + p.get_width() / 2., p.get_height()), 
                   ha = 'center', va = 'center', 
                   xytext = (0, 9), 
                   textcoords = 'offset points')
plt.xlabel("İlçe", size=10)
plt.ylabel("Güncel Fiyat (TL)", size=10)

df_train_set['ilçe'] = df_train_set['ilçe'].replace(np.nan, 'Kınık', regex=True)
df_train_set['semt'] = df_train_set['semt'].replace(np.nan, 'Musacalı', regex=True)

df_test_set['ilçe'] = df_test_set['ilçe'].replace(np.nan, 'Kınık', regex=True)
df_test_set['semt'] = df_test_set['semt'].replace(np.nan, 'Musacalı', regex=True)

df_train_set.ilçe = df_train_set.ilçe.replace({"Kınık": "1", "Bergama": "2", "Tire": "3", "Beydağ": "4", "Torbalı": "5",
                                               "Bayındır": "6", "Buca": "7", "Ödemiş": "8", "Menemen": "9", "Beylikdüzü": "10",
                                               "Karabağlar": "11", "Çiğli": "12", "Pendik": "13", "Selçuk": "14", "Konak": "15",
                                               "Seferihisar": "16", "Dikili": "17", "Aliağa": "18", "Bayraklı": "19", "Balçova": "20",
                                               "Kemalpaşa": "21", "Menderes": "22", "Gaziemir": "23", "Karşıyaka": "24", "Bornova": "25",
                                               "Bağcılar": "26", "Karaburun": "27", "Foça": "28", "Narlıdere": "29", "Güzelbahçe": "30",
                                               "Kadıköy": "31", "Urla": "32", "Çeşme": "33", "Beşiktaş": "34"})

df_test_set.ilçe = df_test_set.ilçe.replace({"Kınık": "1", "Bergama": "2", "Tire": "3", "Beydağ": "4", "Torbalı": "5",
                                               "Bayındır": "6", "Buca": "7", "Ödemiş": "8", "Menemen": "9", "Beylikdüzü": "10",
                                               "Karabağlar": "11", "Çiğli": "12", "Pendik": "13", "Selçuk": "14", "Konak": "15",
                                               "Seferihisar": "16", "Dikili": "17", "Aliağa": "18", "Bayraklı": "19", "Balçova": "20",
                                               "Kemalpaşa": "21", "Menderes": "22", "Gaziemir": "23", "Karşıyaka": "24", "Bornova": "25",
                                               "Bağcılar": "26", "Karaburun": "27", "Foça": "28", "Narlıdere": "29", "Güzelbahçe": "30",
                                               "Kadıköy": "31", "Urla": "32", "Çeşme": "33", "Beşiktaş": "34", "Kiraz": "0"})

df_semt = df_train_set.groupby('semt').agg({'güncel_fiyat': 'mean'})
df_semt_sorted = df_semt.sort_values(by=['güncel_fiyat'])
df_semt_sorted['semtler'] = df_semt_sorted.index
df_semt_sorted = df_semt_sorted[['güncel_fiyat', 'semtler']]
df_semt_sorted.reset_index(drop=True, inplace=True)

sıralama = []
for i in range(0, 640):
    sıralama.append(i)

sıralama = (pd.DataFrame(sıralama, columns =['sıra'], dtype = int))

sıralama = (pd.DataFrame(sıralama))

df_semt_sorted = pd.concat([df_semt_sorted, sıralama], axis=1)

df_semt_sorted.reset_index(drop=True)
df_semt_sorted

semt_dict = dict(zip(df_semt_sorted.semtler, df_semt_sorted.sıra))

df_train_set.semt = df_train_set.ilçe.replace(semt_dict)
df_test_set.semt = df_test_set.ilçe.replace(semt_dict)

"""**Encoding**"""

labelencoder = LabelEncoder()

df_train_set['ınterkom'] = labelencoder.fit_transform(df_train_set['ınterkom'].values)
df_train_set['depremyönetmeliğineuygun'] = labelencoder.fit_transform(df_train_set['depremyönetmeliğineuygun'].values)
df_train_set['asansör'] = labelencoder.fit_transform(df_train_set['asansör'].values)
df_train_set['cocukoyunalanı'] = labelencoder.fit_transform(df_train_set['cocukoyunalanı'].values)
df_train_set['giyinmeodası'] = labelencoder.fit_transform(df_train_set['giyinmeodası'].values)
df_train_set['ebeveynbanyosu'] = labelencoder.fit_transform(df_train_set['ebeveynbanyosu'].values)
df_train_set['il'] = labelencoder.fit_transform(df_train_set['il'].values)

df_test_set['ınterkom'] = labelencoder.fit_transform(df_test_set['ınterkom'].values)
df_test_set['depremyönetmeliğineuygun'] = labelencoder.fit_transform(df_test_set['depremyönetmeliğineuygun'].values)
df_test_set['asansör'] = labelencoder.fit_transform(df_test_set['asansör'].values)
df_test_set['cocukoyunalanı'] = labelencoder.fit_transform(df_test_set['cocukoyunalanı'].values)
df_test_set['giyinmeodası'] = labelencoder.fit_transform(df_test_set['giyinmeodası'].values)
df_test_set['ebeveynbanyosu'] = labelencoder.fit_transform(df_test_set['ebeveynbanyosu'].values)
df_test_set['il'] = labelencoder.fit_transform(df_test_set['il'].values)

df_test_set.isna().sum()

df_test_set['Sosyo_Eko'] = df_test_set['Sosyo_Eko'].replace({'NAN':np.nan}).astype(float)

df_test_set['Sosyo_Eko'] = df_test_set['Sosyo_Eko'].fillna(value=df_test_set["Sosyo_Eko"].mean())

df_test_set['Egitim_uni'] = df_test_set['Egitim_uni'].fillna(value=df_test_set["Egitim_uni"].mean())

df_test_set['Egitim_lise'] = df_test_set['Egitim_lise'].fillna(value=df_test_set["Egitim_lise"].mean())

df_test_set['Egitim_orta'] = df_test_set['Egitim_orta'].fillna(value=df_test_set["Egitim_orta"].mean())

df_test_set['Egitim_ilk'] = df_test_set['Egitim_ilk'].fillna(value=df_test_set["Egitim_ilk"].mean())

df_test_set['Egitim_yok'] = df_test_set['Egitim_yok'].fillna(value=df_test_set["Egitim_yok"].mean())

df_test_set['Guven'] = df_test_set['Guven'].fillna(value=df_test_set["Guven"].mean())

df_test_set['Sessiz'] = df_test_set['Sessiz'].fillna(value=df_test_set["Sessiz"].mean())

df_test_set['Market_kafe'] = df_test_set['Market_kafe'].fillna(value=df_test_set["Market_kafe"].mean())

df_test_set['Ilişki'] = df_test_set['Ilişki'].fillna(value=df_test_set["Ilişki"].mean())

df_test_set['Toplu_taşıma'] = df_test_set['Toplu_taşıma'].fillna(value=df_test_set["Toplu_taşıma"].mean())

df_test_set['m2satışfiyatı_2019'] = df_test_set['m2satışfiyatı_2019'].fillna(value=df_test_set["Toplu_taşıma"].mean())

df_test_set['m2satışfiyatı_2020'] = df_test_set['m2satışfiyatı_2020'].fillna(value=df_test_set["Toplu_taşıma"].mean())

df_train_set.dtypes

df_train_set['binayaşı'] = df_train_set['binayaşı'].astype(int)
df_train_set['bulunduğukat'] = df_train_set['bulunduğukat'].astype(float)
df_train_set['binadakikatsayısı'] = df_train_set['binadakikatsayısı'].astype(float)
df_train_set['banyosayisi'] = df_train_set['banyosayisi'].astype(int)
df_train_set['ilçe'] = df_train_set['ilçe'].astype(int)
df_train_set['semt'] = df_train_set['semt'].astype(int)
df_train_set['Sosyo_Eko'] = df_train_set['Sosyo_Eko'].astype(int)
df_train_set['manzara_1'] = df_train_set['manzara_1'].astype(int)
df_train_set['manzara_2'] = df_train_set['manzara_2'].astype(int)
df_train_set['manzara_3'] = df_train_set['manzara_3'].astype(int)
df_train_set['emlaktipi_1'] = df_train_set['emlaktipi_1'].astype(int)
df_train_set['otoparkvarmı'] = df_train_set['otoparkvarmı'].astype(int)
df_train_set['kapalıotopark'] = df_train_set['kapalıotopark'].astype(int)
df_train_set['ücretsizotopark'] = df_train_set['ücretsizotopark'].astype(int)
df_train_set['ücretliotopark'] = df_train_set['ücretliotopark'].astype(int)
df_train_set['sobalı'] = df_train_set['sobalı'].astype(int)
df_train_set['dogalgazlı'] = df_train_set['dogalgazlı'].astype(int)
df_train_set['merkeziısıtma'] = df_train_set['merkeziısıtma'].astype(int)
df_train_set['kömürlü'] = df_train_set['kömürlü'].astype(int)
df_train_set['kaloriferli'] = df_train_set['kaloriferli'].astype(int)
df_train_set['kombili'] = df_train_set['kombili'].astype(int)
df_train_set['ısıtma_klima'] = df_train_set['ısıtma_klima'].astype(int)
df_train_set['ısıtma_diger'] = df_train_set['ısıtma_diger'].astype(int)


df_test_set['binayaşı'] = df_test_set['binayaşı'].astype(int)
df_test_set['bulunduğukat'] = df_test_set['bulunduğukat'].astype(float)
df_test_set['binadakikatsayısı'] = df_test_set['binadakikatsayısı'].astype(float)
df_test_set['banyosayisi'] = df_test_set['banyosayisi'].astype(int)
df_test_set['ilçe'] = df_test_set['ilçe'].astype(int)
df_test_set['semt'] = df_test_set['semt'].astype(int)
df_test_set['Sosyo_Eko'] = df_test_set['Sosyo_Eko'].astype(int)
df_test_set['manzara_1'] = df_test_set['manzara_1'].astype(int)
df_test_set['manzara_2'] = df_test_set['manzara_2'].astype(int)
df_test_set['manzara_3'] = df_test_set['manzara_3'].astype(int)
df_test_set['emlaktipi_1'] = df_test_set['emlaktipi_1'].astype(int)
df_test_set['otoparkvarmı'] = df_test_set['otoparkvarmı'].astype(int)
df_test_set['kapalıotopark'] = df_test_set['kapalıotopark'].astype(int)
df_test_set['ücretsizotopark'] = df_test_set['ücretsizotopark'].astype(int)
df_test_set['ücretliotopark'] = df_test_set['ücretliotopark'].astype(int)
df_test_set['sobalı'] = df_test_set['sobalı'].astype(int)
df_test_set['dogalgazlı'] = df_test_set['dogalgazlı'].astype(int)
df_test_set['merkeziısıtma'] = df_test_set['merkeziısıtma'].astype(int)
df_test_set['kömürlü'] = df_test_set['kömürlü'].astype(int)
df_test_set['kaloriferli'] = df_test_set['kaloriferli'].astype(int)
df_test_set['kombili'] = df_test_set['kombili'].astype(int)
df_test_set['ısıtma_klima'] = df_test_set['ısıtma_klima'].astype(int)
df_test_set['ısıtma_diger'] = df_test_set['ısıtma_diger'].astype(int)

def show_correlations(df, show_chart = False):
    fig = plt.figure(figsize = (50,30))
    corr = df.corr()
    if show_chart == True:
        sns.heatmap(corr, 
                    xticklabels=corr.columns.values,
                    yticklabels=corr.columns.values,
                    annot=True)
    return corr

correlation_df = show_correlations(df_train_set, show_chart = True)

correlation_df = correlation_df.güncel_fiyat.abs().sort_values()
correlation_df

df_train_set.columns

X_train = df_train_set[['brütm2', 'netm2', 'binayaşı', 'bulunduğukat', 'binadakikatsayısı', 'banyosayisi', 'ınterkom',
                        'depremyönetmeliğineuygun', 'asansör', 'cocukoyunalanı', 'giyinmeodası', 'ebeveynbanyosu',
                        'yıl', 'ay', 'gün', 'il', 'ilçe', 'semt', 'dolar', 'faiz', 'insaatmaliyetendeksi', 'konutfiyatendeksi',
                        'Sosyo_Eko', 'Egitim_uni', 'Egitim_lise', 'Egitim_orta', 'Egitim_ilk', 'Egitim_yok', 'Guven', 'Sessiz',
                        'Market_kafe', 'Ilişki', 'Toplu_taşıma', 'm2satışfiyatı_2019', 'm2satışfiyatı_2020', 'manzara_1',
                        'manzara_2', 'manzara_3', 'emlaktipi_1', 'oda', 'salon', 'toplam_odasayısı', 'otoparkvarmı', 'kapalıotopark',
                        'ücretsizotopark', 'ücretliotopark', 'dogalgazlı', 'sobalı', 'merkeziısıtma', 'kömürlü', 'kaloriferli', 'kombili', 'ısıtma_klima', 'ısıtma_diger']].values
y_train = df_train_set[['güncel_fiyat']].values

X_test = df_test_set[['brütm2', 'netm2', 'binayaşı', 'bulunduğukat', 'binadakikatsayısı', 'banyosayisi', 'ınterkom',
                      'depremyönetmeliğineuygun', 'asansör', 'cocukoyunalanı', 'giyinmeodası', 'ebeveynbanyosu',
                      'yıl', 'ay', 'gün', 'il', 'ilçe', 'semt', 'dolar', 'faiz', 'insaatmaliyetendeksi', 'konutfiyatendeksi',
                        'Sosyo_Eko', 'Egitim_uni', 'Egitim_lise', 'Egitim_orta', 'Egitim_ilk', 'Egitim_yok', 'Guven', 'Sessiz',
                        'Market_kafe', 'Ilişki', 'Toplu_taşıma', 'm2satışfiyatı_2019', 'm2satışfiyatı_2020', 'manzara_1',
                        'manzara_2', 'manzara_3', 'emlaktipi_1', 'oda', 'salon', 'toplam_odasayısı', 'otoparkvarmı', 'kapalıotopark',
                        'ücretsizotopark', 'ücretliotopark', 'dogalgazlı', 'sobalı', 'merkeziısıtma', 'kömürlü', 'kaloriferli', 'kombili', 'ısıtma_klima', 'ısıtma_diger']].values

############## Dataset 2 ##############
# %3'ten daha az korelasyon gösteren değişkenlerin çıkartılarak oluşturulduğu subset:

X_train_2 = df_train_set[['brütm2', 'netm2', 'binayaşı', 'bulunduğukat', 'binadakikatsayısı', 'banyosayisi', 'ınterkom',
                        'depremyönetmeliğineuygun', 'cocukoyunalanı', 'giyinmeodası', 'ebeveynbanyosu', 'yıl', 'il', 'ilçe', 'semt', 'dolar', 'faiz',
                        'konutfiyatendeksi', 'Sosyo_Eko', 'Egitim_uni', 'Egitim_lise', 'Egitim_orta', 'Egitim_ilk', 'Egitim_yok',
                        'Guven', 'Sessiz', 'Market_kafe', 'Ilişki', 'Toplu_taşıma', 'm2satışfiyatı_2019',
                        'm2satışfiyatı_2020', 'manzara_1', 'manzara_2', 'manzara_3', 'emlaktipi_1', 'oda', 'salon', 'toplam_odasayısı',
                        'otoparkvarmı', 'kapalıotopark', 'ücretsizotopark', 'dogalgazlı', 'merkeziısıtma', 'kombili', 'ısıtma_klima']].values
y_train_2 = df_train_set[['güncel_fiyat']].values

X_test_2 = df_test_set[['brütm2', 'netm2', 'binayaşı', 'bulunduğukat', 'binadakikatsayısı', 'banyosayisi', 'ınterkom',
                        'depremyönetmeliğineuygun', 'cocukoyunalanı', 'giyinmeodası', 'ebeveynbanyosu', 'yıl', 'il', 'ilçe', 'semt', 'dolar', 'faiz',
                        'konutfiyatendeksi', 'Sosyo_Eko', 'Egitim_uni', 'Egitim_lise', 'Egitim_orta', 'Egitim_ilk', 'Egitim_yok',
                        'Guven', 'Sessiz', 'Market_kafe', 'Ilişki', 'Toplu_taşıma', 'm2satışfiyatı_2019',
                        'm2satışfiyatı_2020', 'manzara_1', 'manzara_2', 'manzara_3', 'emlaktipi_1', 'oda', 'salon', 'toplam_odasayısı',
                        'otoparkvarmı', 'kapalıotopark', 'ücretsizotopark', 'dogalgazlı', 'merkeziısıtma', 'kombili', 'ısıtma_klima']].values
y_test_2 = df_test_set[['güncel_fiyat']].values

type(X_train_2)

mean = X_train.mean(axis=0)
X_train -= mean
std = X_train.std(axis=0)
X_train /= std
X_test -= mean
X_test /= std

mean_2 = X_train_2.mean(axis=0)
X_train_2 -= mean_2
std_2 = X_train_2.std(axis=0)
X_train_2 /= std_2
X_test_2 -= mean_2
X_test_2 /= std_2

def mape(y_true, y_pred): 
    y_true, y_pred = np.array(y_true), np.array(y_pred)
    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100

def predVisualization(test_pred,y_test):
  x_ax = range(len(test_pred))
  figure(figsize=(50, 10), dpi=80)
  plt.scatter(x_ax, y_test, lw=6, color="blue", label="original")
  plt.scatter(x_ax, test_pred, lw=4, color="red", label="predicted_rtc")
  plt.legend()
  plt.style.use('default')
  plt.show()

def errorVisualization(test_pred,y_test):
  diffs = abs(test_pred-y_test)
  x_ax = range(len(test_pred))
  figure(figsize=(50, 10), dpi=80)
  plt.style.use('default')
  plt.plot(x_ax, test_pred-y_test, lw=6, color="blue", label="difference")
  plt.legend()
  plt.show()

# XGBOOST without GridSearch:

def XGB(X_train,Y_train):
  xgb_reg = XGBRegressor(n_estimators=300, objective='reg:squarederror', max_depth=6, learning_rate=0.025)
  xgb_reg.fit(X_train, Y_train)
  train_preds_xgb_reg = xgb_reg.predict(X_train)
  test_preds_xgb_reg = xgb_reg.predict(X_test)

  #XGB Metrics:
  mae_xgb_train = mean_absolute_error(Y_train, train_preds_xgb_reg)
  print('MAE Train: ', mae_xgb_train)

  mse_xgb_train = mean_squared_error(Y_train, train_preds_xgb_reg)
  print('MSE Train: ', mse_xgb_train)

  rmse_xgb_train = mean_squared_error(Y_train, train_preds_xgb_reg, squared=False)
  print('RMSE Train: ', rmse_xgb_train)

  r2_xgb_train = r2_score(Y_train, train_preds_xgb_reg)
  print('R2 Train: ', r2_xgb_train)

  #mape_train = mape(Y_train, train_preds_xgb_reg)
  #print('Mape Train: ', mape_train)

  explained_variance__train = explained_variance_score(Y_train, train_preds_xgb_reg)
  print('Explanied Variance Score Train: ', explained_variance__train)

 # CoV_train = rmse_xgb_train/np.mean(Y_train)
 # print('CoV Train: ', CoV_train)

 # errorVisualization(train_preds_xgb_reg, Y_train)

 # predVisualization(train_preds_xgb_reg,Y_train)

XGB(X_train,y_train)

?KNeighborsRegressor

parameters_knn = {
        'n_neighbors': [10, 25, 50, 100],
        'leaf_size': [30, 50, 100]
        }

knn = KNeighborsRegressor()
knn_cv = GridSearchCV(knn, parameters_knn, cv = 4, verbose = 3)
knn_cv.fit(X_train, y_train)
best = knn_cv.best_params_
best_values = best.values()
best_values_list = list(best_values)

knn = KNeighborsRegressor(n_neighbors = best_values_list[0],
                    leaf_size = best_values_list[1])
  
knn_tuned =  knn.fit(X_train, y_train)  

train_preds_knn_reg = knn_tuned.predict(X_train)

#KNN Metrics:
mae_knn_train = mean_absolute_error(y_train, train_preds_knn_reg)
print('mae_knn_train: ', mae_knn_train)

mse_knn_train = mean_squared_error(y_train, train_preds_knn_reg)
print('mse_knn_train: ',mse_knn_train)

rmse_knn_train = mean_squared_error(y_train, train_preds_knn_reg, squared=False)
print('rmse_knn_train: ',rmse_knn_train)

r2_knn_train = r2_score(y_train, train_preds_knn_reg)
print('r2_knn_train: ', r2_knn_train)

explained_variance__train = explained_variance_score(y_train, train_preds_knn_reg)
print('Explanied Variance Score Train: ', explained_variance__train)

knn2 = KNeighborsRegressor()
knn2_cv = GridSearchCV(knn2, parameters_knn, cv = 4, verbose = 3)
knn2_cv.fit(X_train_2, y_train_2)
best = knn2_cv.best_params_
best_values = best.values()
best_values_list = list(best_values)

knn2 = KNeighborsRegressor(n_neighbors = best_values_list[0],
                    leaf_size = best_values_list[1])
  
knn2_tuned =  knn2.fit(X_train_2, y_train_2)  

train_preds_knn2_reg = knn2_tuned.predict(X_train_2)

#knn2 Metrics:
mae_knn2_train = mean_absolute_error(y_train_2, train_preds_knn2_reg)
print('mae_knn2_train: ', mae_knn2_train)

mse_knn2_train = mean_squared_error(y_train_2, train_preds_knn2_reg)
print('mse_knn2_train: ',mse_knn2_train)

rmse_knn2_train = mean_squared_error(y_train_2, train_preds_knn2_reg, squared=False)
print('rmse_knn2_train: ',rmse_knn2_train)

r2_knn2_train = r2_score(y_train_2, train_preds_knn2_reg)
print('r2_knn2_train: ', r2_knn2_train)

explained_variance_train_2 = explained_variance_score(y_train_2, train_preds_knn2_reg)
print('Explanied Variance Score Train: ', explained_variance_train_2)

rf_reg = RandomForestRegressor()
rf_reg.fit(X_train, y_train)

train_preds_rf_reg = rf_reg.predict(X_train)

#rf Metrics:
mae_rf_train = mean_absolute_error(y_train, train_preds_rf_reg)
print('MAE Train: ', mae_rf_train)

mse_rf_train = mean_squared_error(y_train, train_preds_rf_reg)
print('MSE Train: ', mse_rf_train)

rmse_rf_train = mean_squared_error(y_train, train_preds_rf_reg, squared=False)
print('RMSE Train: ', rmse_rf_train)

r2_rf_train = r2_score(y_train, train_preds_rf_reg)
print('R2 Train: ', r2_rf_train)

explained_variance_train = explained_variance_score(y_train, train_preds_rf_reg)
print('Explanied Variance Score Train: ', explained_variance_train)

rf_reg = RandomForestRegressor()
rf_reg.fit(X_train_2, y_train_2)

train_preds_rf_reg = rf_reg.predict(X_train_2)

#rf Metrics:
mae_rf_train = mean_absolute_error(y_train_2, train_preds_rf_reg)
print('MAE Train: ', mae_rf_train)

mse_rf_train = mean_squared_error(y_train_2, train_preds_rf_reg)
print('MSE Train: ', mse_rf_train)

rmse_rf_train = mean_squared_error(y_train_2, train_preds_rf_reg, squared=False)
print('RMSE Train: ', rmse_rf_train)

r2_rf_train = r2_score(y_train_2, train_preds_rf_reg)
print('R2 Train: ', r2_rf_train)

explained_variance_train = explained_variance_score(y_train_2, train_preds_rf_reg)
print('Explanied Variance Score Train: ', explained_variance_train)

test_preds = rf_reg.predict(X_test_2)

test_preds = pd.DataFrame(test_preds)

test_preds

test_preds.describe()

test_preds_sub = test_preds.copy()

test_preds_sub[test_preds_sub < 0] = 0
#test_preds_sub

df_sample_sub_1 = pd.read_csv('gdrive/My Drive/Dogus/sample_submission_zingat.csv', sep=",")
submission = pd.concat([df_sample_sub_1, test_preds_sub.reindex(df_sample_sub_1.index)], axis=1)
submission

submission = submission.iloc[:, [0, 2]]
submission = submission.rename(columns={"Id": "Id", "0": "Expected"})

#submission = submission.rename(columns={"0": "Expected"})
submission.to_csv('submission.csv', index=False)

# Kaggle'a yüklendikten sonraki sonuç:

# Random Forest'ta aşırı öğrenme görüldü. Bu nedenle XGBoost seçildi.

